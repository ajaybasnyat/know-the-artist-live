{"version":3,"sources":["Artist.js","App.js","reportWebVitals.js","index.js"],"names":["Artist","name","image","onClick","className","id","src","width","height","require","config","App","useState","token","setToken","search","setSearch","query","setQuery","artists","setArtists","currentArtist","setCurrentArtist","tracks","setTracks","orderedTracks","setOrderedTracks","showSubmitButton","setShowSubmitButton","renderResults","setRenderResults","relatedArtists","setRelatedArtists","numCorrectTracks","setNumCorrectTracks","initialRender","useRef","spotifyApi","SpotifyWebApi","useEffect","getToken","current","getArtistTracks","getRelatedArtists","searchArtist","a","process","fetch","method","headers","Authorization","btoa","CLIENT_ID","body","result","json","data","access_token","setAccessToken","searchArtists","then","items","err","console","error","getArtistRelatedArtists","slice","getArtistTopTracks","tracksInOrder","tracksRandomized","shuffle","onSubmit","e","preventDefault","type","value","onChange","target","map","images","length","url","onDragEnd","destination","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","draggableId","snapshot","draggableProps","dragHandleProps","style","isDragging","draggableStyle","background","correct","placeholder","count","forEach","track","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a8127db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Artist = ({name, image, onClick}) => {\r\n    return (\r\n        <div className='artist-div' onClick={onClick}>\r\n            <h2 id='artist-name'>{name} </h2>\r\n            <img src={image} width=\"300\" height=\"300\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Artist;","import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Artist from \"./Artist\";\nimport shuffle from \"shuffle-array\";\nrequire(\"dotenv\").config();\n\n// application\nconst App = () => {\n  // token for api access\n  const [token, setToken] = useState(\"\");\n  // search bar input\n  const [search, setSearch] = useState(\"\");\n  // query string for api\n  const [query, setQuery] = useState(\"\");\n  // artists returned on user search\n  const [artists, setArtists] = useState([]);\n  // current artist user selects\n  const [currentArtist, setCurrentArtist] = useState(\"\");\n  // tracks of the artist\n  const [tracks, setTracks] = useState([]);\n  // the tracks in correct popularity order\n  const [orderedTracks, setOrderedTracks] = useState([]);\n  // boolean when to show submit button\n  const [showSubmitButton, setShowSubmitButton] = useState(false);\n  // boolean when to show results\n  const [renderResults, setRenderResults] = useState(false);\n  // artists related to current artist\n  const [relatedArtists, setRelatedArtists] = useState([]);\n  // correct number of user guesses\n  const [numCorrectTracks, setNumCorrectTracks] = useState(0);\n  // mark initial render when app first runs\n  const initialRender = useRef(true);\n  // create var from spotify-web-api-js wrapper class that manages api\n  var spotifyApi = new SpotifyWebApi();\n\n  // get api access token on first render\n  useEffect(() => {\n    getToken();\n  }, []);\n\n  // use effect, updates whenever current artist is changed\n  useEffect(() => {\n    // if not first render\n    if (!initialRender.current) {\n      // get the artist top tracks\n      getArtistTracks();\n      // show submit button\n      setShowSubmitButton(true);\n      // get related artists\n      getRelatedArtists();\n      // render results\n      setRenderResults(false);\n    }\n  }, [currentArtist]);\n\n  // use effect whenever user searches\n  useEffect(() => {\n    // if its the first render, do nothing but set intialrender to false\n    if (initialRender.current) {\n      initialRender.current = false;\n    } else {  \n      // search for the artist\n      searchArtist();\n      // set render results\n      setRenderResults(false);\n      setShowSubmitButton(false);\n      // reset tracks\n      setTracks([]);\n      // reset ordered tracks\n      setOrderedTracks([]);\n    }\n  }, [query]);\n\n  // method to get token for api access\n  const getToken = async () => {\n    // get client id and secret from environmental vars\n    const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n    const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\n    // fetch token from api\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization: \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET),\n      },\n      body: \"grant_type=client_credentials\",\n    });\n    // get res and set as token\n    const data = await result.json();\n    setToken(data.access_token);\n  };\n\n  // set token to wrapper class object\n  spotifyApi.setAccessToken(token);\n\n  // method to search for artists\n  const searchArtist = async () => {\n    spotifyApi.searchArtists(query).then(\n      function (data) {\n        // set all artists from res\n        setArtists(data.artists.items);\n      },\n      function (err) {\n        console.error(err);\n      }\n    );\n  };\n\n  // method to get artists related to the current artist\n  const getRelatedArtists = async () => {\n    spotifyApi.getArtistRelatedArtists(currentArtist).then(\n      function (data) {\n        // set the first 5 related artists\n        setRelatedArtists(data.artists.slice(0, 5));\n      },\n      function (err) {\n        console.error(err);\n      }\n    );\n  };\n\n  // method to get an artists top tracks\n  const getArtistTracks = async () => {\n    spotifyApi.getArtistTopTracks(currentArtist, \"US\").then(\n      function (data) {\n        // get top 5 tracks (by default gets top 10 tracks)\n        var tracksInOrder = data.tracks.slice(0, 5);\n        // update ordered tracks\n        setOrderedTracks(tracksInOrder);\n        // copy array and randomize order (by default they are returned by popularity)\n        var tracksRandomized = [...tracksInOrder];\n        shuffle(tracksRandomized);\n        // set the tracks\n        setTracks(tracksRandomized);\n        // clear artist search\n        setArtists([]);\n      },\n      function (err) {\n        console.error(err);\n      }\n    );\n  };\n\n  // method to update search state from input\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  // method to update query state and reset input field on search\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  // func to handle dragging tracks when arranging them \n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n\n    const items = Array.from(tracks);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setTracks(items);\n  }\n\n  // func to handle when submit button is clicked\n  function onSubmit() {\n    // create count var for tracking how many correct guesses user has\n    var count = 0;\n    // loop through tracks\n    tracks.forEach(function (track, i) {\n      // if track was in correct position\n      if (track == orderedTracks[i]) {\n        // increase count\n        count++;\n        // add 'correct' attribute to tracks for addressing their classes in JSX\n        orderedTracks[i].correct = true;\n        tracks[i].correct = true;\n      }\n      else {\n        tracks[i].correct = false;\n      }\n    });\n    // reset and render results\n    setShowSubmitButton(false);\n    setRenderResults(true);\n    setNumCorrectTracks(count);\n  }\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // change background colour if dragging\n    background: isDragging ? \"MediumSeaGreen\" : \"#242424\",\n  \n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  // return JSX\n  return (\n    <div className=\"App\">\n      <h1>Know The Artist</h1>\n      <p>Search an artist and try to arrange their top five tracks from most to least popular</p> \n      \n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"btn\" type=\"submit\"> Search </button>\n      </form>\n      {/* map artist data to component props with id, name and images - some artists do not have images, so must check if images exist */}\n      {artists.map((artists) => (\n        <Artist\n          key={artists.id}\n          name={artists.name}\n          image={artists.images.length > 0 ? artists.images[1].url : \"\"}\n          // when an artist is clicked, set them as current artist\n          onClick={(e) => {\n            setCurrentArtist(artists.id);\n          }}\n        />\n      ))}\n      {/* using Beautiful DND library, drag and drop to handle user arranging tracks */}\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <Droppable droppableId=\"tracks\">\n          {(provided) => (\n            <ol\n              className=\"tracks\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {tracks.map((tracks, index) => {\n                return (\n                  <Draggable\n                    key={tracks.id}\n                    draggableId={tracks.id}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <li\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <h3 id='track-name' className={(tracks.correct && renderResults) ? 'correctTrack' : (!tracks.correct && renderResults) ? 'incorrectTrack' : ''}>{tracks.name}</h3>\n                      </li>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </ol>\n          )}\n        </Droppable>\n      </DragDropContext>\n      {showSubmitButton ? <button className='btn' onClick={onSubmit}>Submit</button> : null}\n      {/* render results if applicable */}\n      {renderResults ? (\n        <div>\n          <h2>Your score: {numCorrectTracks} / 5 </h2>\n          <h2 className='correct-order-h2'>Correct Order: </h2>\n          <ol className=\"orderedTracks\">\n            {/* map through ordered tracks to show correct order */}\n            {orderedTracks.map((orderedTracks) => {\n              return (\n              <li key={orderedTracks.id}>\n                <h3 className={orderedTracks.correct ? 'correctTrack' : 'incorrectTrack'}>{orderedTracks.name}</h3>\n              </li>\n              )\n            })}\n          </ol>\n          <h2 className='related-artists-h2'>Related Artists</h2>\n          {/* map related artists so user can quickly start with a different artist */}\n          {relatedArtists.map((relatedArtists) => (\n            <Artist\n              key={relatedArtists.id}\n              name={relatedArtists.name}\n              image={\n                relatedArtists.images.length > 0\n                  ? relatedArtists.images[1].url\n                  : \"\"\n              }\n              onClick={(e) => {\n                setCurrentArtist(relatedArtists.id);\n              }}\n            />\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}